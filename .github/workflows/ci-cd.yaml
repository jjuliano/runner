name: CI/CD

on:
  push:
    branches:
      - main

permissions:
  contents: write  # This gives the GITHUB_TOKEN the necessary permissions

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set PROJECT_NAME
        run: echo "PROJECT_NAME=runner" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22

      - name: Get commit hash
        id: get_commit_hash
        run: echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Get commit messages since last release
        id: get_commit_messages
        run: echo "commits=$(git log --pretty=format:'%s' ${{ env.COMMIT_HASH }}..HEAD)" >> $GITHUB_ENV
        env:
          COMMIT_HASH: ${{ env.COMMIT_HASH }}

      # - name: Run tests
      #   run: make test

      - name: Build for Mac, Linux and Windows
        run: make build

      - name: Package binary for Linux (amd64)
        run: |
          tar -czvf ${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_linux_amd64.tar.gz -C ./build ./${{ env.PROJECT_NAME }}_linux_amd64/${{ env.PROJECT_NAME }}
        working-directory: ${{ github.workspace }}

      - name: Package binary for Linux (arm64)
        run: |
          tar -czvf ${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_linux_arm64.tar.gz -C ./build ./${{ env.PROJECT_NAME }}_linux_arm64/${{ env.PROJECT_NAME }}
        working-directory: ${{ github.workspace }}

      - name: Package binary for macOS (amd64)
        run: |
          tar -czvf ${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_darwin_amd64.tar.gz -C ./build ./${{ env.PROJECT_NAME }}_darwin_amd64/${{ env.PROJECT_NAME }}
        working-directory: ${{ github.workspace }}

      - name: Package binary for macOS (arm64)
        run: |
          tar -czvf ${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_darwin_arm64.tar.gz -C ./build ./${{ env.PROJECT_NAME }}_darwin_arm64/${{ env.PROJECT_NAME }}
        working-directory: ${{ github.workspace }}

      - name: Package binary for Windows (amd64)
        run: |
          cd ./build && zip -r ../${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_windows_amd64.zip ./${{ env.PROJECT_NAME }}_windows_amd64/${{ env.PROJECT_NAME }}
        working-directory: ${{ github.workspace }}

      - name: Package binary for Windows (arm64)
        run: |
          cd ./build && zip -r ../${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_windows_arm64.zip ./${{ env.PROJECT_NAME }}_windows_arm64/${{ env.PROJECT_NAME }}
        working-directory: ${{ github.workspace }}

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
        with:
          tag_name: ""
          release_name: DEV Release ${{ env.COMMIT_HASH }}
          body: ${{ env.commits }}
          generate_release_notes: true

      - name: Upload release artifact (Linux - amd64)
        id: upload-release-asset-linux-amd64
        uses: actions/upload-release-asset@v1
        env:
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_linux_amd64.tar.gz
          asset_name: ${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_linux_amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload release artifact (Linux - arm64)
        id: upload-release-asset-linux-arm64
        uses: actions/upload-release-asset@v1
        env:
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_linux_arm64.tar.gz
          asset_name: ${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_linux_arm64.tar.gz
          asset_content_type: application/gzip

      - name: Upload release artifact (macOS - amd64)
        id: upload-release-asset-macOS-amd64
        uses: actions/upload-release-asset@v1
        env:
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_darwin_amd64.tar.gz
          asset_name: ${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_darwin_amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload release artifact (macOS - arm64)
        id: upload-release-asset-macOS-arm64
        uses: actions/upload-release-asset@v1
        env:
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_darwin_arm64.tar.gz
          asset_name: ${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_darwin_arm64.tar.gz
          asset_content_type: application/gzip

      - name: Upload release artifact (Windows - amd64)
        id: upload-release-asset-windows-amd64
        uses: actions/upload-release-asset@v1
        env:
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_windows_amd64.zip
          asset_name: ${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_windows_amd64.zip
          asset_content_type: application/zip

      - name: Upload release artifact (Windows - arm64)
        id: upload-release-asset-windows-arm64
        uses: actions/upload-release-asset@v1
        env:
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_windows_arm64.zip
          asset_name: ${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_windows_arm64.zip
          asset_content_type: application/zip
