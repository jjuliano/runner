name: CI/CD

on:
  push:
    branches:
      - main

permissions:
  contents: write  # This gives the GITHUB_TOKEN the necessary permissions

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set PROJECT_NAME
        run: echo "PROJECT_NAME=kdeps" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Get commit message
        id: get_commit_message
        run: echo "COMMIT_MESSAGE=$(git log -1 --pretty=format:'%s')" >> $GITHUB_ENV

      - name: Get commit hash
        id: get_commit_hash
        run: echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Run tests
        run: make test

      - name: Build for Linux
        run: make linux

      - name: Build for macOS
        run: make darwin

      - name: Build for Windows
        run: make windows

      - name: Build for ARM
        run: make arm

      - name: Package binary for Linux
        run: |
          tar -czvf ${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_linux_amd64.tar.gz -C ./build/${{ env.PROJECT_NAME }}_linux_amd64 ./${{ env.PROJECT_NAME }}
        working-directory: ${{ github.workspace }}

      - name: Package binary for macOS
        run: |
          tar -czvf ${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_darwin_amd64.tar.gz -C ./build/${{ env.PROJECT_NAME }}_darwin_amd64 ./${{ env.PROJECT_NAME }}
        working-directory: ${{ github.workspace }}

      - name: Package binary for Windows
        run: |
          zip -r ${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_windows_amd64.zip ./build/${{ env.PROJECT_NAME }}_windows_amd64/${{ env.PROJECT_NAME }}.exe
        working-directory: ${{ github.workspace }}

      - name: Package binary for ARM
        run: |
          tar -czvf ${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_linux_arm.tar.gz -C ./build/${{ env.PROJECT_NAME }}_linux_arm ./${{ env.PROJECT_NAME }}
        working-directory: ${{ github.workspace }}

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
        with:
          tag_name: ${{ env.COMMIT_HASH }}
          release_name: DEV Release ${{ env.COMMIT_HASH }}
          body: ${{ env.COMMIT_MESSAGE }}

      - name: Upload release artifact (Linux)
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_linux_amd64.tar.gz
          asset_name: ${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_linux_amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload release artifact (macOS)
        id: upload-release-asset-macOS
        uses: actions/upload-release-asset@v1
        env:
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_darwin_amd64.tar.gz
          asset_name: ${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_darwin_amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload release artifact (Windows)
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_windows_amd64.zip
          asset_name: ${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_windows_amd64.zip
          asset_content_type: application/zip

      - name: Upload release artifact (ARM)
        id: upload-release-asset-arm
        uses: actions/upload-release-asset@v1
        env:
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_linux_arm.tar.gz
          asset_name: ${{ env.PROJECT_NAME }}_${{ env.COMMIT_HASH }}_linux_arm.tar.gz
          asset_content_type: application/gzip
