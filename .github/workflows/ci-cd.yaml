name: CI/CD

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set PROJECT_NAME
        run: echo "PROJECT_NAME=runner" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22

      - name: Get commit hash
        id: get_commit_hash
        run: echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Get commit messages since last release
        id: get_commit_messages
        run: echo "commits=$(git log --pretty=format:'%s' ${{ env.COMMIT_HASH }}..HEAD)" >> $GITHUB_ENV
        env:
          COMMIT_HASH: ${{ env.COMMIT_HASH }}

      - name: Run tests
        run: make test

      - name: Run build
        run: make build

      - name: Package binaries
        run: |
          platforms=(
            "aix/ppc64"
            "android/386"
            "android/amd64"
            "android/arm"
            "android/arm64"
            "darwin/amd64"
            "darwin/arm64"
            "dragonfly/amd64"
            "freebsd/386"
            "freebsd/amd64"
            "freebsd/arm"
            "freebsd/arm64"
            "freebsd/riscv64"
            "illumos/amd64"
            "ios/amd64"
            "ios/arm64"
            "js/wasm"
            "linux/386"
            "linux/amd64"
            "linux/arm"
            "linux/arm64"
            "linux/loong64"
            "linux/mips"
            "linux/mips64"
            "linux/mips64le"
            "linux/mipsle"
            "linux/ppc64"
            "linux/ppc64le"
            "linux/riscv64"
            "linux/s390x"
            "netbsd/386"
            "netbsd/amd64"
            "netbsd/arm"
            "netbsd/arm64"
            "openbsd/386"
            "openbsd/amd64"
            "openbsd/arm"
            "openbsd/arm64"
            "openbsd/ppc64"
            "plan9/386"
            "plan9/amd64"
            "plan9/arm"
            "solaris/amd64"
            "wasip1/wasm"
            "windows/386"
            "windows/amd64"
            "windows/arm"
            "windows/arm64"
          )

          for platform in "${platforms[@]}"; do
            GOOS=${platform%/*}
            GOARCH=${platform#*/}
            file_ext=".tar.gz"
            if [ $GOOS = "windows" ]; then
              file_ext=".zip"
            fi
            tar -czvf ${{ env.PROJECT_NAME }}_${GOOS}_${GOARCH}${file_ext} -C ./build ./${{ env.PROJECT_NAME }}_${GOOS}_${GOARCH}
          done
        working-directory: ${{ github.workspace }}

      - name: Get current date
        id: get_date
        run: echo "RELEASE_DATE=$(date '+%b %d, %Y')" >> $GITHUB_ENV

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          PROJECT_NAME: ${{ env.PROJECT_NAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "dev"
          name: "Nightly Release (${{ env.RELEASE_DATE }})"
          prerelease: true
          body: ${{ env.commits }}
          generate_release_notes: true
          files: ./*.tar.gz ./*.zip
